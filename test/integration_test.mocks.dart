// Mocks generated by Mockito 5.4.5 from annotations
// in tfl_api_explorer/test/integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tfl_api_client/src/accident_stats/services/accident_stats_service.dart'
    as _i3;
import 'package:tfl_api_client/src/air_quality/services/air_quality_service.dart'
    as _i4;
import 'package:tfl_api_client/src/bike_point/services/bike_point_service.dart'
    as _i5;
import 'package:tfl_api_client/src/cabwise/services/cabwise_service.dart'
    as _i6;
import 'package:tfl_api_client/src/common/models/place.dart' as _i2;
import 'package:tfl_api_client/src/cycle_superhighway/services/cycle_superhighway_service.dart'
    as _i7;
import 'package:tfl_api_client/src/journey/services/journey_service.dart'
    as _i8;
import 'package:tfl_api_client/src/line/services/line_service.dart' as _i9;
import 'package:tfl_api_client/src/mode/services/mode_service.dart' as _i10;
import 'package:tfl_api_client/src/network_status/services/network_status_service.dart'
    as _i11;
import 'package:tfl_api_client/src/occupancy/services/occupancy_service.dart'
    as _i12;
import 'package:tfl_api_client/src/place/services/place_service.dart' as _i13;
import 'package:tfl_api_client/src/road/services/road_service.dart' as _i14;
import 'package:tfl_api_client/src/search/services/search_service.dart' as _i15;
import 'package:tfl_api_client/src/stop_point/services/stop_point_service.dart'
    as _i16;
import 'package:tfl_api_client/src/tfl_api_client_base.dart' as _i19;
import 'package:tfl_api_client/src/vehicle/services/vehicle_service.dart'
    as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlace_0 extends _i1.SmartFake implements _i2.Place {
  _FakePlace_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccidentStatsService_1 extends _i1.SmartFake
    implements _i3.AccidentStatsService {
  _FakeAccidentStatsService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAirQualityService_2 extends _i1.SmartFake
    implements _i4.AirQualityService {
  _FakeAirQualityService_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBikePointService_3 extends _i1.SmartFake
    implements _i5.BikePointService {
  _FakeBikePointService_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCabwiseService_4 extends _i1.SmartFake
    implements _i6.CabwiseService {
  _FakeCabwiseService_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCycleSuperhighwayService_5 extends _i1.SmartFake
    implements _i7.CycleSuperhighwayService {
  _FakeCycleSuperhighwayService_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeJourneyService_6 extends _i1.SmartFake
    implements _i8.JourneyService {
  _FakeJourneyService_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLineService_7 extends _i1.SmartFake implements _i9.LineService {
  _FakeLineService_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeModeService_8 extends _i1.SmartFake implements _i10.ModeService {
  _FakeModeService_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetworkStatusService_9 extends _i1.SmartFake
    implements _i11.NetworkStatusService {
  _FakeNetworkStatusService_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOccupancyService_10 extends _i1.SmartFake
    implements _i12.OccupancyService {
  _FakeOccupancyService_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePlaceService_11 extends _i1.SmartFake implements _i13.PlaceService {
  _FakePlaceService_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRoadService_12 extends _i1.SmartFake implements _i14.RoadService {
  _FakeRoadService_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSearchService_13 extends _i1.SmartFake
    implements _i15.SearchService {
  _FakeSearchService_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStopPointService_14 extends _i1.SmartFake
    implements _i16.StopPointService {
  _FakeStopPointService_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVehicleService_15 extends _i1.SmartFake
    implements _i17.VehicleService {
  _FakeVehicleService_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BikePointService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBikePointService extends _i1.Mock implements _i5.BikePointService {
  MockBikePointService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<List<_i2.Place>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i18.Future<List<_i2.Place>>.value(<_i2.Place>[]),
          )
          as _i18.Future<List<_i2.Place>>);

  @override
  _i18.Future<_i2.Place> get(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#get, [id]),
            returnValue: _i18.Future<_i2.Place>.value(
              _FakePlace_0(this, Invocation.method(#get, [id])),
            ),
          )
          as _i18.Future<_i2.Place>);

  @override
  _i18.Future<List<_i2.Place>> search(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#search, [query]),
            returnValue: _i18.Future<List<_i2.Place>>.value(<_i2.Place>[]),
          )
          as _i18.Future<List<_i2.Place>>);
}

/// A class which mocks [TflApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockTflApiClient extends _i1.Mock implements _i19.TflApiClient {
  MockTflApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AccidentStatsService get accidentStats =>
      (super.noSuchMethod(
            Invocation.getter(#accidentStats),
            returnValue: _FakeAccidentStatsService_1(
              this,
              Invocation.getter(#accidentStats),
            ),
          )
          as _i3.AccidentStatsService);

  @override
  _i4.AirQualityService get airQuality =>
      (super.noSuchMethod(
            Invocation.getter(#airQuality),
            returnValue: _FakeAirQualityService_2(
              this,
              Invocation.getter(#airQuality),
            ),
          )
          as _i4.AirQualityService);

  @override
  _i5.BikePointService get bikePoint =>
      (super.noSuchMethod(
            Invocation.getter(#bikePoint),
            returnValue: _FakeBikePointService_3(
              this,
              Invocation.getter(#bikePoint),
            ),
          )
          as _i5.BikePointService);

  @override
  _i6.CabwiseService get cabwise =>
      (super.noSuchMethod(
            Invocation.getter(#cabwise),
            returnValue: _FakeCabwiseService_4(
              this,
              Invocation.getter(#cabwise),
            ),
          )
          as _i6.CabwiseService);

  @override
  _i7.CycleSuperhighwayService get cycleSuperhighway =>
      (super.noSuchMethod(
            Invocation.getter(#cycleSuperhighway),
            returnValue: _FakeCycleSuperhighwayService_5(
              this,
              Invocation.getter(#cycleSuperhighway),
            ),
          )
          as _i7.CycleSuperhighwayService);

  @override
  _i8.JourneyService get journey =>
      (super.noSuchMethod(
            Invocation.getter(#journey),
            returnValue: _FakeJourneyService_6(
              this,
              Invocation.getter(#journey),
            ),
          )
          as _i8.JourneyService);

  @override
  _i9.LineService get line =>
      (super.noSuchMethod(
            Invocation.getter(#line),
            returnValue: _FakeLineService_7(this, Invocation.getter(#line)),
          )
          as _i9.LineService);

  @override
  _i10.ModeService get mode =>
      (super.noSuchMethod(
            Invocation.getter(#mode),
            returnValue: _FakeModeService_8(this, Invocation.getter(#mode)),
          )
          as _i10.ModeService);

  @override
  _i11.NetworkStatusService get networkStatus =>
      (super.noSuchMethod(
            Invocation.getter(#networkStatus),
            returnValue: _FakeNetworkStatusService_9(
              this,
              Invocation.getter(#networkStatus),
            ),
          )
          as _i11.NetworkStatusService);

  @override
  _i12.OccupancyService get occupancy =>
      (super.noSuchMethod(
            Invocation.getter(#occupancy),
            returnValue: _FakeOccupancyService_10(
              this,
              Invocation.getter(#occupancy),
            ),
          )
          as _i12.OccupancyService);

  @override
  _i13.PlaceService get place =>
      (super.noSuchMethod(
            Invocation.getter(#place),
            returnValue: _FakePlaceService_11(this, Invocation.getter(#place)),
          )
          as _i13.PlaceService);

  @override
  _i14.RoadService get road =>
      (super.noSuchMethod(
            Invocation.getter(#road),
            returnValue: _FakeRoadService_12(this, Invocation.getter(#road)),
          )
          as _i14.RoadService);

  @override
  _i15.SearchService get search =>
      (super.noSuchMethod(
            Invocation.getter(#search),
            returnValue: _FakeSearchService_13(
              this,
              Invocation.getter(#search),
            ),
          )
          as _i15.SearchService);

  @override
  _i16.StopPointService get stopPoint =>
      (super.noSuchMethod(
            Invocation.getter(#stopPoint),
            returnValue: _FakeStopPointService_14(
              this,
              Invocation.getter(#stopPoint),
            ),
          )
          as _i16.StopPointService);

  @override
  _i17.VehicleService get vehicle =>
      (super.noSuchMethod(
            Invocation.getter(#vehicle),
            returnValue: _FakeVehicleService_15(
              this,
              Invocation.getter(#vehicle),
            ),
          )
          as _i17.VehicleService);
}
